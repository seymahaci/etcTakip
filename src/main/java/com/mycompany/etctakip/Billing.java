/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package com.mycompany.etctakip;

import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.BorderFactory;
import javax.swing.JOptionPane;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import javax.swing.RowFilter;
import javax.swing.UIManager;
import javax.swing.event.MouseInputAdapter;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableModel;
import javax.swing.table.TableRowSorter;

/**
 *
 * @author frankie
 */
public class Billing extends javax.swing.JFrame {
    
    String url = "jdbc:mysql://localhost:3306/etc_academy_ybs";
    String username = "root";
    String password = "etc5861";

    /**
     * Creates new form 
     */
    public Billing() {
        initComponents();
        fetchDataFromDatabase();
        fetchOtherPaymentDataFromDatabase();
        
        jTable1.addMouseListener(new MouseAdapter() {
            @Override
            public void mouseClicked(MouseEvent ec) {
                if (ec.getClickCount() == 2) {
                    int selectedRow = jTable1.getSelectedRow();
                    int id = (int) jTable1.getValueAt(selectedRow, 0);
                    String idString = String.valueOf(id);

                    if (idString.startsWith("7") || idString.startsWith("8")) {
                        String query = "SELECT text FROM billing WHERE id = " + idString;

                        try (Connection connection = DriverManager.getConnection(url, username, password);
                             Statement statement = connection.createStatement();
                             ResultSet resultSet = statement.executeQuery(query)) {

                            if (resultSet.next()) {
                                String text = resultSet.getString("text");
                                showCopyableDialog("Açıklama: " + text);
                            } else {
                                JOptionPane.showMessageDialog(null, "ID starts with 7 but no matching text found");
                            }
                        } catch (SQLException e) {
                            e.printStackTrace();
                        }
                    } else if (id >= 90000 && id < 110000) {
                        String query = "SELECT iban, reason, telefon FROM odeme_diger WHERE odeme_id = " + id;

                        try (Connection connection = DriverManager.getConnection(url, username, password);
                             Statement statement = connection.createStatement();
                             ResultSet resultSet = statement.executeQuery(query)) {

                            if (resultSet.next()) {
                                String iban = resultSet.getString("iban");
                                String text = resultSet.getString("reason");
                                String tel = resultSet.getString("telefon");
                                showCopyableDialog("IBAN: " + iban + "\nText: " + text + "Telefon: " + tel);
                            } else {
                                JOptionPane.showMessageDialog(null, "No data found for the selected ID: " + id);
                            }
                        } catch (SQLException e) {
                            e.printStackTrace();
                        }
                    }
                }
            }
        });
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    
     private void showCopyableDialog(String message) {
        JTextArea textArea = new JTextArea(message);
        textArea.setEditable(false);
        textArea.setOpaque(false);
        textArea.setBorder(BorderFactory.createEmptyBorder(10, 10, 10, 10));
        textArea.setFont(UIManager.getFont("Label.font"));

        JScrollPane scrollPane = new JScrollPane(textArea);
        scrollPane.setBorder(BorderFactory.createEmptyBorder());

        JOptionPane.showMessageDialog(null, scrollPane, "Information", JOptionPane.INFORMATION_MESSAGE);
    }
     
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jTextField2 = new javax.swing.JTextField();
        jButton1 = new javax.swing.JButton();
        jSeparator1 = new javax.swing.JSeparator();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jSeparator3 = new javax.swing.JSeparator();
        jComboBox2 = new javax.swing.JComboBox<>();
        jComboBox3 = new javax.swing.JComboBox<>();
        jButton5 = new javax.swing.JButton();
        jComboBox4 = new javax.swing.JComboBox<>();
        jButton6 = new javax.swing.JButton();
        jLabel7 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        jSeparator4 = new javax.swing.JSeparator();
        jTextField3 = new javax.swing.JTextField();
        jCheckBox1 = new javax.swing.JCheckBox();
        jButton4 = new javax.swing.JButton();
        jComboBox7 = new javax.swing.JComboBox<>();
        jComboBox8 = new javax.swing.JComboBox<>();
        jLabel11 = new javax.swing.JLabel();
        jButton7 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jButton8 = new javax.swing.JButton();
        jButton9 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        jLabel1.setFont(new java.awt.Font("Inconsolata Expanded Black", 0, 18)); // NOI18N
        jLabel1.setText("      Ödemeler");

        jLabel2.setText("Filtrele");

        jLabel3.setText("Gelir/Gider");
        jLabel3.setToolTipText("");

        jLabel4.setText("Ödendi mi?");

        jLabel6.setText("Adı");

        jTextField2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField2ActionPerformed(evt);
            }
        });

        jButton1.setText("Filtrele");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jTable1.setAutoCreateRowSorter(true);
        jTable1.setFont(new java.awt.Font("Dialog", 0, 15)); // NOI18N
        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Ödeme ID", "Adı Soyadı", "Ödeme Tipi", "Ödeme Tarihi", "Miktar", "Ödendi mi?"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.Integer.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, true, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTable1.setRowHeight(30);
        jScrollPane1.setViewportView(jTable1);

        jSeparator3.setOrientation(javax.swing.SwingConstants.VERTICAL);

        jComboBox2.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "seç", "gelir", "gider", "gelir_eg", "gelir_di", "gider_eg", "gider_di", " " }));
        jComboBox2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBox2ActionPerformed(evt);
            }
        });

        jComboBox3.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "seç", "ödendi", "ödenmedi" }));
        jComboBox3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBox3ActionPerformed(evt);
            }
        });

        jButton5.setText("Çık");
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });

        jComboBox4.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "seç", "gelir", "gider" }));
        jComboBox4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBox4ActionPerformed(evt);
            }
        });

        jButton6.setText("Topla");
        jButton6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton6ActionPerformed(evt);
            }
        });

        jLabel7.setText("Gelir/Gider");
        jLabel7.setToolTipText("");

        jLabel10.setText("Hesapla");

        jTextField3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField3ActionPerformed(evt);
            }
        });

        jCheckBox1.setText("Ödenmişleri dahil et");
        jCheckBox1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBox1ActionPerformed(evt);
            }
        });

        jButton4.setText("ödendi/ödenmedi");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        jComboBox7.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "seç", "2023", "2024", "2025", "2026", "2027", "2028", "2029", "2030", "2031", "2032", "2033" }));
        jComboBox7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBox7ActionPerformed(evt);
            }
        });

        jComboBox8.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "seç", "1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12" }));
        jComboBox8.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBox8ActionPerformed(evt);
            }
        });

        jLabel11.setText("Ay-Yıl");

        jButton7.setText("Güncelle");
        jButton7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton7ActionPerformed(evt);
            }
        });

        jButton2.setText("Sıfırla");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jButton8.setText("Diğer Ödeme Ekle");
        jButton8.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton8ActionPerformed(evt);
            }
        });

        jButton9.setText("Değişiklikleri Kaydet");
        jButton9.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton9ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(66, 66, 66)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(jLabel4)
                                            .addComponent(jLabel3)
                                            .addComponent(jLabel6))
                                        .addGap(60, 60, 60)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                            .addComponent(jTextField2, javax.swing.GroupLayout.DEFAULT_SIZE, 138, Short.MAX_VALUE)
                                            .addComponent(jComboBox2, 0, 138, Short.MAX_VALUE)
                                            .addComponent(jComboBox3, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(71, 71, 71)
                                        .addComponent(jSeparator4, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addComponent(jCheckBox1)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(41, 41, 41)
                                        .addComponent(jButton6)
                                        .addGap(18, 18, 18)
                                        .addComponent(jTextField3, javax.swing.GroupLayout.PREFERRED_SIZE, 78, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(92, 92, 92)
                                        .addComponent(jLabel10))
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(9, 9, 9)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                            .addGroup(layout.createSequentialGroup()
                                                .addComponent(jButton1)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                                .addComponent(jButton2))
                                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                                .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                                    .addComponent(jLabel7)
                                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                    .addComponent(jComboBox4, javax.swing.GroupLayout.PREFERRED_SIZE, 78, javax.swing.GroupLayout.PREFERRED_SIZE))
                                                .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                                    .addComponent(jLabel11)
                                                    .addGap(60, 60, 60)
                                                    .addComponent(jComboBox8, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                    .addComponent(jComboBox7, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))))))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(163, 163, 163)
                                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 63, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(30, 30, 30)
                        .addComponent(jSeparator3, javax.swing.GroupLayout.PREFERRED_SIZE, 18, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addGroup(layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 1136, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(37, 37, 37)
                                .addComponent(jButton7)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jButton9)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jButton8, javax.swing.GroupLayout.PREFERRED_SIZE, 173, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jButton4, javax.swing.GroupLayout.PREFERRED_SIZE, 173, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jButton5)
                                .addGap(62, 62, 62))))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(173, 173, 173)
                        .addComponent(jLabel2))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(644, 644, 644)
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 233, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(46, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(49, 49, 49)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jLabel2)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 13, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel6)
                            .addComponent(jTextField2, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel3)
                            .addComponent(jComboBox2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel4)
                            .addComponent(jComboBox3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jButton1)
                            .addComponent(jButton2))
                        .addGap(36, 36, 36)
                        .addComponent(jLabel10)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jSeparator4, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel7)
                            .addComponent(jComboBox4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel11)
                            .addComponent(jComboBox8, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jComboBox7, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addComponent(jCheckBox1)
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jButton6)
                            .addComponent(jTextField3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addGroup(layout.createSequentialGroup()
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 602, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(jButton5)
                                .addComponent(jButton4)
                                .addComponent(jButton7)
                                .addComponent(jButton8)
                                .addComponent(jButton9)))
                        .addComponent(jSeparator3, javax.swing.GroupLayout.PREFERRED_SIZE, 665, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(63, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jTextField2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField2ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextField2ActionPerformed

    private void jCheckBox1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBox1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jCheckBox1ActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
            // Seçili satırın indeksini al
        int selectedRowIndex = jTable1.getSelectedRow();
        if (selectedRowIndex == -1) {
            JOptionPane.showMessageDialog(null, "Lütfen güncellemek istediğiniz satırı seçin.");
            return;
        }

        // Seçili satırın tick değerini al
        String currentTickValue = jTable1.getValueAt(selectedRowIndex, 5).toString();

        // Yeni tick değerini belirle
        String newTickValue = currentTickValue.equals("ödendi") ? "ödenmedi" : "ödendi";

        // Tabloda ve veritabanında güncelleme yap
        try {
            // Seçili satırın ID'sini al
            int selectedRowID = Integer.parseInt(jTable1.getValueAt(selectedRowIndex, 0).toString());

            // Tabloda güncelleme yap
            jTable1.setValueAt(newTickValue, selectedRowIndex, 5);
            String idString = String.valueOf(selectedRowID);

            if (idString.startsWith("7") || idString.startsWith("8")) {
                Connection conn = DriverManager.getConnection(url, username, password);

                // PreparedStatement oluştur ve güncelleme sorgusunu hazırla
                String updateQuery = "UPDATE billing SET tick = ? WHERE id = ?";
                PreparedStatement updateStatement = conn.prepareStatement(updateQuery);
                updateStatement.setString(1, newTickValue);
                updateStatement.setInt(2, selectedRowID);

                // Sorguyu çalıştır ve güncelleme yap
                updateStatement.executeUpdate();

                // Bağlantıyı kapat
                conn.close();
            }else if (selectedRowID >= 90000 && selectedRowID < 110000) {
                Connection conn = DriverManager.getConnection(url, username, password);

                // PreparedStatement oluştur ve güncelleme sorgusunu hazırla
                String updateQuery = "UPDATE odeme_diger SET tick = ? WHERE odeme_id = ?";
                PreparedStatement updateStatement = conn.prepareStatement(updateQuery);
                updateStatement.setString(1, newTickValue);
                updateStatement.setInt(2, selectedRowID);

                // Sorguyu çalıştır ve güncelleme yap
                updateStatement.executeUpdate();

                // Bağlantıyı kapat
                conn.close();
            }

            // Veritabanı bağlantısını oluştur
            

        } catch (SQLException ex) {
            ex.printStackTrace();
        }
    }//GEN-LAST:event_jButton4ActionPerformed

    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed
        MainPage mainPage = new MainPage();
        mainPage.setVisible(true);
        this.dispose();
    }//GEN-LAST:event_jButton5ActionPerformed

    private void jButton7ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton7ActionPerformed
        DefaultTableModel model = (DefaultTableModel) jTable1.getModel();
        model.setRowCount(0); // Tüm satırları temizle
        fetchDataFromDatabase();
        fetchOtherPaymentDataFromDatabase();
    }//GEN-LAST:event_jButton7ActionPerformed

    private void jComboBox2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBox2ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jComboBox2ActionPerformed

    private void jComboBox3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBox3ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jComboBox3ActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        String adFilter = "(?i)" + jTextField2.getText().trim(); // (?i) ifadesi büyük/küçük harf hassasiyetini kaldırır
        String kindFilter = jComboBox2.getSelectedItem().toString();
        String odenmeFilter = jComboBox3.getSelectedItem().toString();
        
        TableRowSorter<TableModel> sorter = new TableRowSorter<>(jTable1.getModel());
        jTable1.setRowSorter(sorter);

        List<RowFilter<Object,Object>> filters = new ArrayList<>();

        if (!adFilter.equals("seç")) {
            filters.add(RowFilter.regexFilter(adFilter, 1)); // 1 is the index of ad column
        }
        // Kurs filter
        if (!kindFilter.equals("seç")) {
            filters.add(RowFilter.regexFilter(".*" + kindFilter + ".*", 2)); // 2 is the index of the kind column
        } 

        
        if (!odenmeFilter.equals("seç")) {
            filters.add(RowFilter.regexFilter(odenmeFilter, 5)); // 5 is the index of uygunluk column
        }


        RowFilter<Object,Object> combinedFilter = RowFilter.andFilter(filters);
        sorter.setRowFilter(combinedFilter);
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        jTextField2.setText("");
        jComboBox2.setSelectedItem("seç");
        jComboBox3.setSelectedItem("seç");

        // Veritabanından verileri alarak tabloyu güncelle
        jTable1.setRowSorter(null);
        //fetchDataFromDatabase();
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jComboBox8ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBox8ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jComboBox8ActionPerformed

    private void jComboBox7ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBox7ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jComboBox7ActionPerformed

    private void jComboBox4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBox4ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jComboBox4ActionPerformed

    private void jTextField3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField3ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextField3ActionPerformed

    private void jButton6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton6ActionPerformed
        // Seçilen ödeme tipini, ayı ve yılı al
        String selectedPaymentType = jComboBox4.getSelectedItem().toString();
        String selectedMonth = jComboBox8.getSelectedItem().toString();
        String selectedYear = jComboBox7.getSelectedItem().toString();
        boolean includePaid = jCheckBox1.isSelected();
        
        String startDateString ="2023/01/01";
        String endDateString = "2033/12/31"; 
        
        // Ay ve yıl değerlerini kullanarak tarih aralığını oluştur
        if(!selectedMonth.equals("seç") && !selectedYear.equals("seç")){
            startDateString = selectedYear + "/" + selectedMonth + "/01";
            endDateString = selectedYear + "/" + selectedMonth + "/31"; // Varsayılan olarak ayın son günü alınıyor
        }
        
        if(selectedMonth.equals("seç") && !selectedYear.equals("seç")){
            startDateString = selectedYear + "/01/01";
            endDateString = selectedYear + "/12/31"; // Varsayılan olarak ayın son günü alınıyor
        }

        try {
            // Tarih aralığını java.util.Date formatına çevir
            SimpleDateFormat sdf = new SimpleDateFormat("yyyy/MM/dd");
            Date startDate = sdf.parse(startDateString);
            Date endDate = sdf.parse(endDateString);

            // Toplam ödeme miktarını tutacak değişkeni başlat
            int totalPaymentAmount = 0;

            // Tablodaki satırları döngüye alarak filtre uygula ve ödeme miktarlarını topla
            for (int i = 0; i < jTable1.getRowCount(); i++) {
                String paymentType = jTable1.getValueAt(i, 2).toString(); // Ödeme tipi
                Date paymentDate = sdf.parse(jTable1.getValueAt(i, 3).toString()); // Ödeme tarihi
                int paymentAmount = Integer.parseInt(jTable1.getValueAt(i, 4).toString()); // Ödeme miktarı
                String paymentStatus = jTable1.getValueAt(i, 5).toString(); // Ödeme durumu
                
                

                // Ödeme miktarını doğrula

                // Seçilen ödeme tipine göre filtreleme
                if (!selectedPaymentType.equals("seç")) {
                    if (selectedPaymentType.equals("gelir")) {
                        if (!paymentType.equals("gelir_eg") && !paymentType.equals("gelir_di")) {
                            continue; // Gelir türü dışındaki ödemeleri atla
                        }
                    } else if (selectedPaymentType.equals("gider")) {
                        if (!paymentType.equals("gider_eg") && !paymentType.equals("gider_di")) {
                            continue; // Gider türü dışındaki ödemeleri atla
                        }
                    }
                }
                

                 //Ödenme durumunu kontrol et (eğer ödenmişler dahil edilmiyorsa ve ödenmemişse devam et)
                if (!includePaid && paymentStatus.equals("ödendi")) {
                    continue;
                }
                // Tarih aralığına göre filtreleme
                if (paymentDate.before(startDate) || paymentDate.after(endDate)) {
                    continue; // Ödeme tarihi belirtilen aralıkta değilse bu satırı atla
                }

                // Yukarıdaki koşulları sağlayan ödemelerin miktarını topla
                totalPaymentAmount += paymentAmount;
            }

            // Toplam ödeme miktarını jTextField3'e yaz
            jTextField3.setText(String.valueOf(totalPaymentAmount));
            
        } catch (ParseException ex) {
            ex.printStackTrace();
        }
    }//GEN-LAST:event_jButton6ActionPerformed

    private void jButton8ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton8ActionPerformed
        DigerOdeme digerOdemeler = new DigerOdeme();
        digerOdemeler.setVisible(true);
    }//GEN-LAST:event_jButton8ActionPerformed

    private void jButton9ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton9ActionPerformed
                //id, adi, telefon, mail, kurs, aktiflik
        int selectedRow = jTable1.getSelectedRow();

        if (selectedRow == -1) {
            JOptionPane.showMessageDialog(null, "Lütfen güncellemek istediğiniz satırı seçin.");
            return;
        }

        int id = Integer.parseInt(jTable1.getValueAt(selectedRow, 0).toString()); // ID değeri 0. sütunda
        String idString = String.valueOf(id);
        
        String amount = jTable1.getValueAt(selectedRow, 4).toString();
        
        if (idString.startsWith("7") || idString.startsWith("8")) {
            try {
                Connection conn = DriverManager.getConnection(url, username, password);

                // PreparedStatement oluştur ve güncelleme sorgusunu hazırla
                String updateQuery = "UPDATE billing SET amount = ? WHERE id = ?";
                PreparedStatement updateStatement = conn.prepareStatement(updateQuery);
                updateStatement.setString(1, amount);
                updateStatement.setInt(2, id);

                // Sorguyu çalıştır ve güncelleme yap
                updateStatement.executeUpdate();

                // Bağlantıyı kapat
                conn.close();
            } catch (SQLException ex) {
                Logger.getLogger(Billing.class.getName()).log(Level.SEVERE, null, ex);
            }
            }else if (id >= 90000 && id < 110000) {
                try {
                    Connection conn = DriverManager.getConnection(url, username, password);

                    // PreparedStatement oluştur ve güncelleme sorgusunu hazırla
                    String updateQuery = "UPDATE odeme_diger SET amount = ? WHERE odeme_id = ?";
                    PreparedStatement updateStatement = conn.prepareStatement(updateQuery);
                    updateStatement.setString(1, amount);
                    updateStatement.setInt(2, id);

                    // Sorguyu çalıştır ve güncelleme yap
                    updateStatement.executeUpdate();

                    // Bağlantıyı kapat
                    conn.close();
                } catch (SQLException ex) {
                    Logger.getLogger(Billing.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        
    }//GEN-LAST:event_jButton9ActionPerformed
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Billing.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Billing.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Billing.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Billing.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Billing().setVisible(true);
            }
        });
    }
    private void fetchDataFromDatabase() {
        String query = "SELECT billing.id, " +
                        "CASE " +
                        "    WHEN billing.type_in_out LIKE '%_eg' AND odeme_egitim_id.taraf_id BETWEEN 30000 AND 49999 THEN egitmen_etc.adi " +
                        "    WHEN billing.type_in_out LIKE '%_eg' AND odeme_egitim_id.taraf_id BETWEEN 50000 AND 69999 THEN ogrenci_etc.adi " +
                        "    ELSE 'Default' " +
                        "END AS adi, " +
                        "billing.type_in_out, " +
                        "billing.date, " +
                        "billing.amount, " +
                        "billing.tick " +
                        "FROM billing " +
                        "LEFT JOIN odeme_egitim_id ON billing.id = odeme_egitim_id.odeme_id " +
                        "LEFT JOIN egitmen_etc ON odeme_egitim_id.taraf_id = egitmen_etc.id AND odeme_egitim_id.taraf_id BETWEEN 30000 AND 49999 " +
                        "LEFT JOIN ogrenci_etc ON odeme_egitim_id.taraf_id = ogrenci_etc.id AND odeme_egitim_id.taraf_id BETWEEN 50000 AND 69999 ";

        try (Connection connection = DriverManager.getConnection(url, username, password);
             Statement statement = connection.createStatement();
             ResultSet resultSet = statement.executeQuery(query)) {

            DefaultTableModel model = (DefaultTableModel) jTable1.getModel();
            SimpleDateFormat dateFormat = new SimpleDateFormat("YYYY/MM/dd");

            while (resultSet.next()) {
                java.sql.Date baslamaTarihi = resultSet.getDate("date");

               // Belirli bir biçime dönüştür
               String date = dateFormat.format(baslamaTarihi);
               
                Object[] rowData = {
                    resultSet.getInt("id"),
                    resultSet.getObject("adi"),
                    resultSet.getObject("type_in_out"),
                    date,
                    resultSet.getInt("amount"),
                    resultSet.getObject("tick")
                };
                model.addRow(rowData);
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }
    
    private void fetchOtherPaymentDataFromDatabase() {
    String query = "SELECT odeme_id, adi, odeme_tipi, odeme_tarihi, amount, tick FROM odeme_diger";

    try (Connection connection = DriverManager.getConnection(url, username, password);
         Statement statement = connection.createStatement();
         ResultSet resultSet = statement.executeQuery(query)) {

        DefaultTableModel model = (DefaultTableModel) jTable1.getModel();
        SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy/MM/dd");

        while (resultSet.next()) {
            int id = resultSet.getInt("odeme_id");
            String adi = resultSet.getString("adi");
            String odemeTipi = resultSet.getString("odeme_tipi");
            java.sql.Date odemeTarihi = resultSet.getDate("odeme_tarihi");
            String date = dateFormat.format(odemeTarihi);
            int amount = resultSet.getInt("amount");
            String tick = resultSet.getString("tick");

            Object[] rowData = {id, adi, odemeTipi, date, amount, tick}; // 0 yerine bir değer belirlemeniz gerekebilir
            model.addRow(rowData);
        }
    } catch (SQLException e) {
        e.printStackTrace();
    }
}

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton5;
    private javax.swing.JButton jButton6;
    private javax.swing.JButton jButton7;
    private javax.swing.JButton jButton8;
    private javax.swing.JButton jButton9;
    private javax.swing.JCheckBox jCheckBox1;
    private javax.swing.JComboBox<String> jComboBox2;
    private javax.swing.JComboBox<String> jComboBox3;
    private javax.swing.JComboBox<String> jComboBox4;
    private javax.swing.JComboBox<String> jComboBox7;
    private javax.swing.JComboBox<String> jComboBox8;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSeparator jSeparator3;
    private javax.swing.JSeparator jSeparator4;
    private javax.swing.JTable jTable1;
    private javax.swing.JTextField jTextField2;
    private javax.swing.JTextField jTextField3;
    // End of variables declaration//GEN-END:variables
}
